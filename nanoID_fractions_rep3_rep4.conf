params{
	// Path to the sample description file
	samples = "/work/pmaragno/sample_txt/sample_nanoID_rep3_rep4.txt"

	// Path to the pipeline scripts folder
	scripts = "/home/pmaragno/nanoID/scripts/"

	// Path to nanoID supplemental files
	nanoIDSupplementals = "/home/pmaragno/nanoID/scripts/Supplemental_Code_S7/BasicObjects/"

	// If the training is required, these must match the conditions to use as unlabeled and fully labeled respectively
	unlabeled_time = "0"
	fullylabeled_time = "24"

	// If the training has been already done this should point to the resulting model
	nanoIDtrainedModel = "/projects/CGS_shared/INSPEcT2/NanoID2run/train.model_419296_1.h5"

	// Path to a folder where to store results
	resultsDir = "/projects/CGS_shared/pmaragno/results_nanoID_fractions_rep3_rep4"

	// FAST5 slot containing the basecalled bases
	fast5_slot = "Basecall_1D_000"

	// Q value for reads filtering
	qvalue = 7

	// Alignment quality score for reads filtering
	alignmentqValue = 0
	
	// Path to the genome fasta
	genome_fasta = "/work/pmaragno/references/Homo_sapiens.GRCh38.dna.primary_assembly.fa"

	// bed file with genes for gene expression quantification
	genesBed = "/work/pmaragno/references/Homo_sapiens.GRCh38.104.genes.bed"
	
	// Cell Cycle Length in minutes
	CCL = 1440

	// Number of seeds for training
	Nseeds = 2

	// Number of subsamplings; linear between 0 and Max
	Nsamplings = 4

	// Sizes to add to the training set
	trainingSizes = "10 100 1000 10000 25000 50000"

	// Set to "true" to use the info contained in the Move slot
	moveSlot = "true"

	// Flags to select which process to run
	gzipCompression = false
	singleToMulti = false
	fastqExtraction = false
	fastqFiltering = false
	genomicAlignment = false
	NID_alignmentExtraction = false
	NID_readExtraction = false
	NID_sequencingSummary = false
	NID_alignmentReconstruction = false
	NID_fivemerAlignmentReconstruction = false
	NID_mismatchReadIdentification = false
	NID_traceModel = false
	NID_traceModelAdd = false
	NID_rawSignal = false
	NID_rawSignalFive = false
	NID_rawSignalFiveAdd = false
	NID_dataFormatting = false
	NID_training = false
	NID_classification = true
	kineticRatesEstimation = false
}

process {
	cpus = 1
	executor = 'pbspro'
	queue = 'workq'
	clusterOptions = '-l walltime=120:00:00'
	perJobMemLimit = true
	withName:gzipCompression{
		container = 'mfurla/ont-api:v0.2'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.gzipCompression ? 15 : 1 }
		memory = { params.gzipCompression ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:singleToMulti{
		container = 'mfurla/ont-api:v0.2'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.singleToMulti ? 15 : 1 }
		memory = { params.singleToMulti ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:fastqExtraction{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.fastqExtraction ? 15 : 1 }
		memory = { params.fastqExtraction ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:fastqFiltering{
		container = 'mfurla/minimap2:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.fastqFiltering ? 15 : 1 }
		memory = { params.fastqFiltering ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:genomicAlignment{
		container = 'mfurla/minimap2.26-r1175:v1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.genomicAlignment ? 15 : 1 }
		memory = { params.genomicAlignment ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_alignmentExtraction{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_alignmentExtraction ? 15 : 1 }
		memory = { params.NID_alignmentExtraction ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_readExtraction{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_readExtraction ? 15 : 1 }
		memory = { params.NID_readExtraction ? 35.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_sequencingSummary{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_sequencingSummary ? 15 : 1 }
		memory = { params.NID_sequencingSummary ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_alignmentReconstruction{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_alignmentReconstruction ? 15 : 1 }
		memory = { params.NID_alignmentReconstruction ? 60.GB + (10.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_fivemerAlignmentReconstruction{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_fivemerAlignmentReconstruction ? 5 : 1 }
		memory = { params.NID_fivemerAlignmentReconstruction ? 100.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_mismatchReadIdentification{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_mismatchReadIdentification ? 15 : 1 }
		memory = { params.NID_mismatchReadIdentification ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_traceModel{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_traceModel ? 15 : 1 }
		memory = { params.NID_traceModel ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_traceModelAdd{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_traceModelAdd ? 15 : 1 }
		memory = { params.NID_traceModelAdd ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_rawSignal{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_rawSignal ? 15 : 1 }
		memory = { params.NID_rawSignal ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_rawSignalFive{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_rawSignalFive ? 15 : 1 }
		memory = { params.NID_rawSignalFive ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_rawSignalFiveAdd{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_rawSignalFiveAdd ? 15 : 1 }
		memory = { params.NID_rawSignalFiveAdd ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_dataFormatting{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_dataFormatting ? 15 : 1 }
		memory = { params.NID_dataFormatting ? 60.GB + (15.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_training{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/CGS_shared:/projects/CGS_shared --bind /work/:/work/'
		cpus = { params.NID_training ? 15 : 1 }
		memory = { params.NID_training ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:NID_classification{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/ --bind /work/:/work/'
		cpus = { params.NID_classification ? 15 : 1 }
		memory = { params.NID_classification ? 60.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:kineticRatesEstimation{
		container = 'mfurla/nanoid:v0.1'
		containerOptions = '--bind /projects/:/projects/'
		cpus = { params.nascentClassificationStats ? 15 : 1 }
		memory = { params.nascentClassificationStats ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130..150 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
}

singularity {
	enabled = true
	autoMounts = false
	cacheDir = "/projects/CGS_shared/smaestri/singularity_cache/"
}

tower {
	enabled = true
	endpoint = '-'
	accessToken = 'eyJ0aWQiOiA3MTQ0fS42YmFkNTkwYjdmOWU5OTM4YjczNWRiZGE3ZDIxNWYzZDFiODc3MDFm'
}
