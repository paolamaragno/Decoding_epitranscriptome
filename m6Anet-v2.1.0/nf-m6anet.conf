 params{
	// Path to the sample description file
        samples = "/path/to/samples.txt"

	// Path to a folder where to store results
	resultsDir = "/path/to/resultsDir"

	// Path to the transcriptome fasta
	transcriptome_fasta = "/path/to/transcriptome.fa"

	// Gtf file
	gtf = "/path/to/file.gtf"

	// Probability modification threshold for calling a site as m6A+
	prob_mod_thr = 0

	// Min MAPQ
        min_mapq = 0

	// Path to post-processing R script
	postprocessingScript = "/path/to/Transcript_to_genome.R"

	//Path to bulk level m6A estimator script
	bulkLevelScript = "/path/to/Calculate_m6anet_bulk.R"

	// Optional arguments for f5c, for example "--kmer-model /path/to/rna004.nucleotide.5mer.model"
	optArgs_f5c = ""

	// Optional arguments for m6Anet, for example "--pretrained_model HEK293T_RNA004" or "--pretrained_model arabidopsis_RNA002"
	optArgs_m6anet = ""

	// Flags to select which process to run
	minimap2 = true
	nanopolish = true
	m6anet1 = true
	m6anet2 = true
	postprocessing = true
}

singularity {
	enabled = true
	autoMounts = false
	cacheDir = "/path/to/singularity/cacheDir"
}

tower {
	enabled = true
	endpoint = '-'
	accessToken = 'nextflowTowerToken'
}

profiles {
	singularity {
		singularity.enabled = true
		singularity.autoMounts = false
		//singularity.cacheDir = "/path/to/singularity/cacheDir" // if commented, work dir is going to be usedd
		process{
			containerOptions = '--bind /home/:/home'
			cpus = 1
			executor = 'pbspro'
			queue = 'workq'
			perJobMemLimit = true
			clusterOptions = '-l walltime=120:00:00'
		withName:minimap2{
			container = 'mfurla/minimap2.26-r1175:v1'
			cpus = { params.minimap2 ? 10 : 1 }
			memory = { params.minimap2 ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:nanopolish{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.nanopolish ? 10 : 1 }
			memory = { params.nanopolish ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:m6anet1{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.m6anet1 ? 10 : 1 }
			memory = { params.m6anet1 ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:m6anet2{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.m6anet2 ? 6 : 1 }
			memory = { params.m6anet2 ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:postprocessing{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.postprocessing ? 6 : 1 }
			memory = { params.postprocessing ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}

	}
}


docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	    process{
			containerOptions = '-v /home/:/home'
			cpus = 1
			executor = 'pbspro'
			queue = 'workq'
			perJobMemLimit = true
		withName:minimap2{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.minimap2 ? 6 : 1 }
			memory = { params.minimap2 ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:nanopolish{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.nanopolish ? 6 : 1 }
			memory = { params.nanopolish ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:m6anet1{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.m6anet1 ? 6 : 1 }
			memory = { params.m6anet1 ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:m6anet2{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.m6anet2 ? 6 : 1 }
			memory = { params.m6anet2 ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
		withName:postprocessing{
			container = 'maestsi/nf-m6anet:latest'
			cpus = { params.postprocessing ? 6 : 1 }
			memory = { params.postprocessing ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}

	}
   }	
}
