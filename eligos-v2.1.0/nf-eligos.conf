 params{
	// Path to the sample description file
	samples = "/p.txt"

        // baseline_condition must match one of the conditions in the samples file
	baseline_condition = "IVT_grid_K562"

	// Path to a folder where to store results
	resultsDir = "/projects/CGS_shared/pmaragno/eligos_fractions_4sU_10sampling"

	// Path to the fasta reference
	reference_fasta = "/work/pmaragno/references/Homo_sapiens.GRCh38.dna.primary_assembly.fa"

        // Spliced alignment flag should be set to true in case of genome alignment
        spliced_alignment_flag = true

        // Minimum mapping quality for filtering alignments
        min_mapq = 0

	// bed file with regions of interest (using the bed with the coordinates of the genes with at least 
	// 20 reads in all the fractions significantly speeds up ELIGOS execution) 
	bed_file = "/work/pmaragno/references/Homo_sapiens.GRCh38.104.selected_genes_total_reads.bed"

	// P-value threshold
	pval_thr = 1

        // Adjusted p-value threshold
        adjPval_thr = 1

        // Odds Ratio threshold
        oddR_thr = 0

        // Error rate threshold for de novo motif discovery
        esb_thr = 0.2

        // minimum number of reads
        min_depth = 20

        // maximum number of reads
        max_depth = 10000

        // base of interest [ATCGN]
        sb = "N"

        // Other optional arguments (e.g. "-bcf <file.bcf> -m <model.json>")
        opt_args = ""
 
	// Flags to select which process to run
	minimap2 = false
        bamMerge = true
	eligosPair = true
	eligosRbem = false
}

singularity {
	enabled = true
	autoMounts = false
	cacheDir = "/projects/CGS_shared/smaestri/singularity_cache/"
}

tower {
	enabled = true
	endpoint = '-'
	accessToken = 'eyJ0aWQiOiA3MTQ0fS42YmFkNTkwYjdmOWU5OTM4YjczNWRiZGE3ZDIxNWYzZDFiODc3MDFm'
}

profiles {
	singularity {
		singularity.enabled = true
		singularity.autoMounts = false
	    	//singularity.cacheDir = "/path/to/sigularity_cacheDir/" // if commented, work dir is going to be usedd
		process{
			cpus = 1
			executor = 'pbspro'
			queue = 'workq'
			perJobMemLimit = true
			containerOptions = '--bind /projects/CGS_shared/:/projects/CGS_shared/ --bind /work/pmaragno/:/work/pmaragno/ --bind /home/pmaragno/:/home/pmaragno/'
                        clusterOptions = '-l walltime=120:00:00'
		withName:minimap2 {
			container = 'mfurla/minimap2.26-r1175:v1'
			cpus = { params.minimap2 ? 6 : 1 }
			memory = { params.minimap2 ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
			errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
			maxRetries = 3
		}
                withName:bamMerge {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.bamMerge ? 6 : 1 }
                        memory = { params.bamMerge ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
		withName:eligosPair {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.eligosPair ? 6 : 1 }
                        memory = { params.eligosPair ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
		withName:eligosRbem {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.eligosRbem ? 6 : 1 }
                        memory = { params.eligosRbem ? 30.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
	}
}

docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	process	{
		cpus = 1
		executor = 'pbspro'
		queue = 'workq'
		perJobMemLimit = true
		containerOptions = '-v /home/:/home'
                withName:minimap2 {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.minimap2 ? 6 : 1 }
                        memory = { params.minimap2 ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
                withName:bamMerge {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.bamMerge ? 6 : 1 }
                        memory = { params.bamMerge ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
                withName:eligosPair {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.eligosPair ? 6 : 1 }
                        memory = { params.eligosPair ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
                withName:eligosRbem {
                        container = 'maestsi/nf-eligos:latest'
                        cpus = { params.eligosRbem ? 6 : 1 }
                        memory = { params.eligosRbem ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
                        errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
                        maxRetries = 3
                }
	}
  }	
}
